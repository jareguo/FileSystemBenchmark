//var exec = require("child_process").exec;
var fs = require("fs");
var url = require("url");
var path = require('path');

if (process.platform == 'win32') {
    var win32 = require('../win32');
}
var mime = require('./mime');

function navigate(response, request) {
    var dir = url.parse(request.url, true).query.path;
    if (dir) {
        //console.log('navigate to : ' + dir);
        fs.readdir(dir, function (error, files) {
            if (error) {
                console.log(error);
                response.writeHead(500, { "Content-Type": "text/plain" });
                response.end(error + "\n");
                return;
            }

            for (var i = 0; i < files.length; ++i) {
                files[i] = mime.stat(path.join(dir, files[i]));
            }

            var json = JSON.stringify({
                files: files,
            });
            response.writeHead(200, { "Content-Type": "application/json" });
            response.end(json);
        });
    }
}

function navigateSync(response, request) {
    var dir = url.parse(request.url, true).query.path;
    if (dir) {
        //console.log('navigate to : ' + dir);
        var items = fs.readdirSync(dir);
        for (var i = 0; i < items.length; ++i) {
            var subPath = path.join(dir, items[i]);
            items[i] = { name : items[i] };
            //console.log(subPath);
            try {
                var stat = fs.statSync(subPath);
            }
            catch (ex) {
                items[i].type = "undefined";
                continue;
            }
            if (stat.isDirectory()) {
                items[i].type = "folder";
            }
            else {
                items[i].type = "file";
            }
        }

        var json = JSON.stringify({
            items : items,
        });
        response.writeHead(200, { "Content-Type": "application/json" });
        response.end(json);
    }
}

function getDrives(response, request) {
    var self = this;
    if (win32) {
        console.log('get drives');
        win32.getDrives(function (drives) {
            for (var i = 0; i < drives.length; ++i) {
                drives[i] = mime.stat(drives[i]);
            }
            var json = JSON.stringify({
                files: drives,
            });
            response.writeHead(200, { "Content-Type": "application/json" });
            response.end(json);
        });
    }
    else {
        response.writeHead(500, { "Content-Type": "text/plain" });
        response.end("not support windows\n");
    }
}

function open(response, request) {
    var filepath = url.parse(request.url, true).query.path;
    console.log("open " + filepath);
    try {
        global.shell.openItem(filepath);
    }
    catch (e) {
        response.writeHead(500, { "Content-Type": "text/plain" });
        response.end("failed to open " + filepath + '\n' + err);
        return;
    }
    response.writeHead(200);
    response.end();
}

function openSync(response, request) {
    var query = url.parse(request.url, true).query;
    var filepath = query.path;
    var length = parseInt(query.length);
    //console.log("open " + filepath);
    try {
        var fd = fs.openSync(filepath, "rs");
    }
    catch (ex) {
        fs.closeSync(fd);
        response.writeHead(500, { "Content-Type": "text/plain" });
        response.end("failed to open " + filepath + '\n' + err);
        return;
    }
    //try {
        var buffer = new Buffer(length);
        //buffer.fill(0);
        var length = fs.readSync(fd, buffer, 0, length);
        //console.log(buffer);
    //}
    //finally {
        fs.closeSync(fd);
    //}
    response.writeHead(200, { 'Content-Length' : length });
    response.end(buffer);
}

exports.navigate = navigate;
exports.navigateSync = navigateSync;
exports.getDrives = getDrives;
exports.open = open;
exports.openSync = openSync;